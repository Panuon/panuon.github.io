import{_ as t,o as d,c as r,R as e}from"./chunks/framework.-3ULgdun.js";const _=JSON.parse('{"title":"Button 按钮","description":"","frontmatter":{},"headers":[],"relativePath":"wpf-ui/zh-cn/button.md","filePath":"wpf-ui/zh-cn/button.md"}'),o={name:"wpf-ui/zh-cn/button.md"},a=e('<h1 id="button-按钮" tabindex="-1">Button 按钮 <a class="header-anchor" href="#button-按钮" aria-label="Permalink to &quot;Button 按钮&quot;">​</a></h1><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><p>该控件是原生控件，必须引用资源字典中的样式才能生效。<br> 请参照<a href="https://panuon.github.io/wpf-ui/zh-cn/contract.html#%E5%BC%95%E7%94%A8%E8%B5%84%E6%BA%90%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E6%A0%B7%E5%BC%8F" target="_blank" rel="noreferrer">约定 -&gt; 引用资源字典中的样式</a>部分，将样式引入到你的程序或控件中。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h2 id="附加属性" tabindex="-1">附加属性 <a class="header-anchor" href="#附加属性" aria-label="Permalink to &quot;附加属性&quot;">​</a></h2><p><em>附加类：</em> <em><code>ButtonHelper</code></em></p><table><thead><tr><th>属性名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>Icon</td><td>object</td><td>null</td><td>图标，可以是文本或控件。细节属性可以通过IconHelper控制。</td></tr><tr><td>IconPlacement</td><td>IconPlacement</td><td>Left</td><td>图标相对于内容的显示位置。</td></tr><tr><td>CornerRadius</td><td>CornerRadius</td><td>0,0,0,0</td><td>圆角大小。</td></tr><tr><td>ShadowColor</td><td>Color?</td><td>null</td><td>阴影颜色，为null时不显示。细节属性可以通过ShadowHelper控制。</td></tr><tr><td>IsPending</td><td>bool</td><td>false</td><td>等待模式，在图标的位置显示一个Spin控件。注意，等待模式下按钮不会被禁用。</td></tr><tr><td>PendingSpinStyle</td><td>Style</td><td>-</td><td>等待模式下显示的Spin控件的样式。</td></tr><tr><td>ClickEffect</td><td>ClickEffect</td><td>None</td><td>鼠标按下时的特殊效果，可以配合等待模式一起使用。</td></tr><tr><td>HoverBackground</td><td>Brush</td><td>?</td><td>鼠标悬浮时的背景色。</td></tr><tr><td>HoverBorderBrush</td><td>Brush</td><td>null</td><td>鼠标悬浮时的边框色。</td></tr><tr><td>HoverBorderThickness</td><td>Thickness?</td><td>null</td><td>鼠标悬浮时的边框粗细，为null时不变。</td></tr><tr><td>HoverCornerRadius</td><td>CornerRadius?</td><td>null</td><td>鼠标悬浮时的圆角大小，为null时不变。</td></tr><tr><td>HoverForeground</td><td>Brush</td><td>null</td><td>鼠标悬浮时的前景色。</td></tr><tr><td>HoverShadowColor</td><td>Color?</td><td>null</td><td>鼠标悬浮时的阴影颜色，为null时不变。</td></tr><tr><td>ClickBackground</td><td>Brush</td><td>?</td><td>鼠标点击时的背景色。</td></tr><tr><td>ClickBorderBrush</td><td>Brush</td><td>null</td><td>鼠标点击时的边框色。</td></tr><tr><td>ClickBorderThickness</td><td>Thickness?</td><td>null</td><td>鼠标点击时的边框粗细，为null时不变。</td></tr><tr><td>ClickCornerRadius</td><td>CornerRadius?</td><td>null</td><td>鼠标点击时的圆角大小，为null时不变。</td></tr><tr><td>ClickForeground</td><td>Brush</td><td>null</td><td>鼠标点击时的前景色。</td></tr><tr><td>ClickShadowColor</td><td>Color?</td><td>null</td><td>鼠标点击时的阴影颜色，为null时不变。</td></tr></tbody></table><h2 id="可以在控件上使用的其他附加类型" tabindex="-1">可以在控件上使用的其他附加类型 <a class="header-anchor" href="#可以在控件上使用的其他附加类型" aria-label="Permalink to &quot;可以在控件上使用的其他附加类型&quot;">​</a></h2><table><thead><tr><th>附加类型</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>WindowX</td><td>IsDragMoveArea</td><td>当控件位于 <em>WindowX</em> 的标题栏区域中时（<code>HeaderTemplate</code>），必须将此属性设为<code>False</code>才能让鼠标点击到按钮。</td></tr><tr><td>IconHelper</td><td>-</td><td>调整图标的位置、边距、字体字号等属性。</td></tr><tr><td>ShadowHelper</td><td>-</td><td>调整阴影的扩散半径、投影距离等属性。</td></tr></tbody></table>',9),n=[a];function l(h,u,c,i,s,p){return d(),r("div",null,n)}const B=t(o,[["render",l]]);export{_ as __pageData,B as default};
