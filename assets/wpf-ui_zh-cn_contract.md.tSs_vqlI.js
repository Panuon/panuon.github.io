import{_ as s,o as i,c as a,R as e}from"./chunks/framework.-3ULgdun.js";const g=JSON.parse('{"title":"约定","description":"","frontmatter":{},"headers":[],"relativePath":"wpf-ui/zh-cn/contract.md","filePath":"wpf-ui/zh-cn/contract.md"}'),t={name:"wpf-ui/zh-cn/contract.md"},n=e(`<h1 id="约定" tabindex="-1">约定 <a class="header-anchor" href="#约定" aria-label="Permalink to &quot;约定&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><code>Panuon.WPF.UI</code> 中分为两种控件：原生控件和自定义控件。 原生控件包括： <em>Button 按钮</em> 、 <em>ToggleButton 状态按钮</em> 、 <em>Slider 滑条</em> 、 <em>ProgressBar 进度条</em> 等WPF中原本就有的控件；<br> 自定义控件包括： <em>WindowX 窗体X</em> 、 、 <em>Breadcrumb 面包屑</em> 、 <em>Carousel 轮播</em> 、 <em>ColorPickerX 颜色选择器X</em> 等在控件库内定义的控件。</p><p>对于原生控件，必须先从资源字典中引用对应的样式（参考<a href="#引用资源字典中的样式">引用资源字典中的样式</a>部分），才能使用 <code>Panuon.WPF.UI</code> 中提供的属性并产生效果。而自定义控件即使不引用资源字典，也可以直接使用。</p><h2 id="引用资源字典中的样式" tabindex="-1">引用资源字典中的样式 <a class="header-anchor" href="#引用资源字典中的样式" aria-label="Permalink to &quot;引用资源字典中的样式&quot;">​</a></h2><p>原生控件必须要引用资源字典后才能使用。<br> 考虑到开发者可能会与其他控件库一起使用，为了避免冲突，<code>Panuon.WPF.UI</code> 中每种原生控件的样式都可以从 <code>独立样式键(StyleKeys)</code> 或 <code>全局覆盖样式</code> 两种方式中任选一个。前者只会在指定的控件上应用样式和效果，而后者会覆盖该类型的所有控件。</p><h3 id="添加资源字典" tabindex="-1">添加资源字典 <a class="header-anchor" href="#添加资源字典" aria-label="Permalink to &quot;添加资源字典&quot;">​</a></h3><p>资源字典可以被添加到 <code>App.xaml</code> 中的 <code>App</code> 节点、任意窗体或控件 <code>*.xaml</code> 中的 <code>Window</code> 、 <code>UserControl</code> 等节点内的 <code>Resources</code> 属性中。<br> 如果添加在 <code>App</code> 节点下， 该资源字典会对整个程序中的所有控件生效；而添加在窗体或控件节点下，该资源字典只对该控件和该控件内的所有子控件生效。<br><code>这也意味着，如果没有通过这两种方式为某个原生控件应用样式，该控件出现的任何变化都是外界因素（例如其他控件库）导致的。</code></p><h4 id="方式一、使用全局资源字典" tabindex="-1">方式一、使用全局资源字典 <a class="header-anchor" href="#方式一、使用全局资源字典" aria-label="Permalink to &quot;方式一、使用全局资源字典&quot;">​</a></h4><p>要直接使用 <code>Panuon.WPF.UI</code> 中提供的所有原生控件样式，可以使用以下资源字典：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/Control.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p><em>Control.xaml</em> 是一个资源字典集合，它包含了所有 <code>Panuon.WPF.UI</code> 中提供的原生样式。<br> 如果只想引用某一种原生控件的样式，不要添加 <em>Control.xaml</em> ；使用以下资源字典：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/$TypeName$.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p><code>$TypeName$</code> 需要替换为具体的控件名称，例如 <code>Button</code> 、 <code>ToggleButton</code> 等。</p><h4 id="方式二、使用独立资源字典" tabindex="-1">方式二、使用独立资源字典 <a class="header-anchor" href="#方式二、使用独立资源字典" aria-label="Permalink to &quot;方式二、使用独立资源字典&quot;">​</a></h4><p>这种方式不会覆盖任何默认样式。<br> 因此，如果只是希望在指定的某个或某一批控件上应用样式，不要添加方式一中的资源字典；换用以下资源字典：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/$TypeName$Style.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p><code>$TypeName$</code> 需要替换为具体的控件名称，例如 <code>Button</code> 、 <code>ToggleButton</code> 等。<br> 使用该资源字典后，由于不会覆盖默认样式，因此还需要为控件指定 <code>Style</code>。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{StaticResource {pu:StyleKeys.ButtonStyle}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>如果要在现有样式的基础上进行二次编辑，则需要为Style指定 <code>BasedOn</code>。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasedOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{StaticResource {pu:StyleKeys.ButtonStyle}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>如果该Style是在 <code>App.xaml</code> 之外的资源字典中编写的，请确保该资源字典能访问到 <code>Panuon.WPF.UI</code> 中的样式（BasedOn只能使用StaticResource，会在当前资源字典内查找资源）。如果出现找不到样式的错误，请在该资源字典的 <code>MergedResourceDictionaries</code> 中添加相应的资源字典：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    xmlns:panuon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clr-namespace:Panuon.WPF;assembly=Panuon.WPF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary.MergedDictionaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">panuon:SharedResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/Styles/ButtonStyle.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary.MergedDictionaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>SharedResourceDictionary</code> 不会重复创建资源字典中的所有内容，因此不必担心资源开销问题。该类型也同样适用于你的自定义资源字典，或是其他控件库的。</p>`,24),l=[n];function p(h,o,c,d,k,r){return i(),a("div",null,l)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
