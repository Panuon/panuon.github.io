import{_ as t,o as s,c as i,R as a}from"./chunks/framework.-3ULgdun.js";const E=JSON.parse('{"title":"Button 按钮","description":"","frontmatter":{},"headers":[],"relativePath":"wpf-ui/zh-cn/button.md","filePath":"wpf-ui/zh-cn/button.md"}'),d={name:"wpf-ui/zh-cn/button.md"},n=a(`<h1 id="button-按钮" tabindex="-1">Button 按钮 <a class="header-anchor" href="#button-按钮" aria-label="Permalink to &quot;Button 按钮&quot;">​</a></h1><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><p>需要引入资源字典中的样式才能生效。<br> 在 <code>App.xaml</code> 或 <code>Resources</code> 属性中，添加全局资源字典：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--覆盖所有的默认控件样式--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/Control.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--仅覆盖Button控件的默认样式--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/Styles/Button.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x:Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyButtonStyle&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasedOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{StaticResource {x:Type Button}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>如果不需要覆盖所有样式，也可以添加独立资源字典，然后用键名来获取/继承样式：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--不会覆盖任何默认样式，必须使用键名--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ResourceDictionary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pack://application:,,,/Panuon.WPF.UI;component/Styles/ButtonStyle.xaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{StaticResource {x:Key pu:StyleKeys.ButtonStyle}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x:Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyButtonStyle&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasedOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{StaticResource {x:Key pu:StyleKeys.ButtonStyle}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h2 id="附加属性" tabindex="-1">附加属性 <a class="header-anchor" href="#附加属性" aria-label="Permalink to &quot;附加属性&quot;">​</a></h2><p><em>附加类：</em> <em><code>ButtonHelper</code></em></p><table><thead><tr><th>属性名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>Icon</td><td>object</td><td>null</td><td>图标，可以是文本或控件。细节属性可以通过IconHelper控制。</td></tr><tr><td>IconPlacement</td><td>IconPlacement</td><td>Left</td><td>图标相对于内容的显示位置。</td></tr><tr><td>CornerRadius</td><td>CornerRadius</td><td>?</td><td>圆角大小。</td></tr><tr><td>ShadowColor</td><td>Color?</td><td>null</td><td>阴影颜色，为null时不显示。细节属性可以通过ShadowHelper控制。</td></tr><tr><td>IsPending</td><td>bool</td><td>false</td><td>等待模式，在图标的位置显示一个Spin控件。注意，等待模式下按钮不会被禁用。</td></tr><tr><td>PendingSpinStyle</td><td>Style</td><td>?</td><td>等待模式下显示的Spin控件的样式。</td></tr><tr><td>ClickEffect</td><td>ClickEffect</td><td>None</td><td>鼠标按下时的特殊效果，可以配合等待模式一起使用。</td></tr><tr><td>HoverBackground</td><td>Brush</td><td>?</td><td>鼠标悬浮时的背景色。</td></tr><tr><td>HoverBorderBrush</td><td>Brush</td><td>?</td><td>鼠标悬浮时的边框色。</td></tr><tr><td>HoverBorderThickness</td><td>Thickness?</td><td>null</td><td>鼠标悬浮时的边框粗细，为null时不变。</td></tr><tr><td>HoverCornerRadius</td><td>CornerRadius?</td><td>null</td><td>鼠标悬浮时的圆角大小，为null时不变。</td></tr><tr><td>HoverForeground</td><td>Brush</td><td>?</td><td>鼠标悬浮时的前景色。</td></tr><tr><td>HoverShadowColor</td><td>Color?</td><td>null</td><td>鼠标悬浮时的阴影颜色，为null时不变。</td></tr><tr><td>ClickBackground</td><td>Brush</td><td>?</td><td>鼠标点击时的背景色。</td></tr><tr><td>ClickBorderBrush</td><td>Brush</td><td>?</td><td>鼠标点击时的边框色。</td></tr><tr><td>ClickBorderThickness</td><td>Thickness?</td><td>null</td><td>鼠标点击时的边框粗细，为null时不变。</td></tr><tr><td>ClickCornerRadius</td><td>CornerRadius?</td><td>null</td><td>鼠标点击时的圆角大小，为null时不变。</td></tr><tr><td>ClickForeground</td><td>Brush</td><td>?</td><td>鼠标点击时的前景色。</td></tr><tr><td>ClickShadowColor</td><td>Color?</td><td>null</td><td>鼠标点击时的阴影颜色，为null时不变。</td></tr></tbody></table><h2 id="可以在控件上使用的其他附加类型" tabindex="-1">可以在控件上使用的其他附加类型 <a class="header-anchor" href="#可以在控件上使用的其他附加类型" aria-label="Permalink to &quot;可以在控件上使用的其他附加类型&quot;">​</a></h2><table><thead><tr><th>附加类型</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>WindowX</td><td>IsDragMoveArea</td><td>当控件位于 <em>WindowX</em> 的标题栏区域中时（<code>HeaderTemplate</code>），必须将此属性设为<code>False</code>才能让鼠标点击到按钮。</td></tr><tr><td>IconHelper</td><td>-</td><td>调整图标的位置、边距、字体字号等属性。</td></tr><tr><td>ShadowHelper</td><td>-</td><td>调整阴影的扩散半径、投影距离等属性。</td></tr></tbody></table>`,12),e=[n];function l(h,r,p,k,o,c){return s(),i("div",null,e)}const y=t(d,[["render",l]]);export{E as __pageData,y as default};
